apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'
apply plugin: 'kotlin-android'
//apply plugin: 'com.android.library'
//apply plugin: 'com.jakewharton.butterknife'
//apply
android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "ss.com.toolkit"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        ndk {
            abiFilters 'armeabi-v7a'
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/maven/com.squareup.okio/okio/pom.xml'
        exclude 'META-INF/maven/com.squareup.okio/okio/pom.properties'
        exclude 'META-INF/LICENSE.txt'
        exclude '.readme'
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/io.netty.versions.properties'
        exclude 'META-INF/proguard/androidx-annotations.pro'
        exclude 'com/bumptech/glide/BuildConfig'

        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            proto {
                srcDir 'src/main/proto'
                include '**/*.proto'
            }
            jniLibs.srcDirs = ['libs']
            java.srcDirs += 'src/main/kotlin'
            java.srcDirs += 'src/main/java'
        }
//        huawei {
//            proto {
//                srcDir 'src/main/proto'
//                include '**/*.proto'
//            }
//            jniLibs.srcDirs = ['libs']
//            java.srcDirs += 'src/main/kotlin'
//            java.srcDirs += 'src/main/java'
//        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
        encoding = 'UTF-8'
    }
    useLibrary 'org.apache.http.legacy'
    applicationVariants.all { variant ->
        println "rename"
        variant.outputs.all { output ->
            outputFileName = "toolkit-${variant.name}-${variant.buildType.name}-${defaultConfig.versionName}.apk"
            println "=====outputFileName :" + outputFileName
            output.processManifest.doLast {
                println "------------output.processManifest.doLast------------"
                // Stores the path to the maifest.
                String manifestPath = "$manifestOutputDirectory/AndroidManifest.xml"
                println "manifestPath: " + manifestPath
                // Stores the contents of the manifest.
                def manifestContent = file(manifestPath).getText()
                // Changes the version code in the stored text.
                manifestContent = manifestContent.replace('android:value="debug"',
                        String.format('android:value="%s"', "google"))
                // Overwrites the manifest with the new text.
                file(manifestPath).write(manifestContent, "UTF-8")
            }
        }
    }
    lintOptions {
        abortOnError false
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }
//    flavorDimensions "market"/*, "region"*/
    /*productFlavors {
        huawei {
            applicationId "ss.com.toolkit.huawei"
            manifestPlaceholders = [UMENG_CHANNEL_VALUE:"channel1"]
            versionCode 1
            versionName "1.0"
            dimension "market"
            buildConfigField "boolean", "SUPPORT_DOWNLOAD", "false"
            project.afterEvaluate {
                android.applicationVariants.all {variant ->
                    String variantName = variant.name.capitalize()
                    def processManifestTask = project.tasks.getByName("process${variantName}Manifest")
                    processManifestTask.doLast { pmt ->
                        def apk = variant.outputs[0].outputFile
                        println("===== apk name:"+apk)
                        String manifestPath = "$pmt.manifestOutputDirectory/AndroidManifest.xml"
                        def manifest = file(manifestPath).getText()

                        def xml = new XmlParser().parseText(manifest)
                        boolean removeSuc = xml.remove(new Node(xml, "uses-permission", ['android:name': 'android.permission.SEND_SMS']))
                        println("remove SEND_SMS  " + removeSuc)
//                        <uses-permission android:name="android.permission.SEND_SMS"/>
//                        xml.application[0].appendNode("meta-data", ['android:name': 'AF_PRE_INSTALL_NAME', 'android:value': '9apps_int'])
                        def serialize = groovy.xml.XmlUtil.serialize(xml)
                        file(manifestPath).write(serialize)
                    }
                }
            }
        }
        *//*xiaomi {
            dimension "market"
            buildConfigField "boolean", "SUPPORT_DOWNLOAD", "true"
        }
        domestic {
            dimension "region"
            buildConfigField "boolean", "SUPPORT_AUTO_UPDATE_FEATURE", "false"
        }
        foreign {
            dimension "region"
            buildConfigField "boolean", "SUPPORT_AUTO_UPDATE_FEATURE", "true"
        }*//*
    }*/
}
protobuf {
    protoc {
        // You still need protoc like in the non-Android case
        artifact = 'com.google.protobuf:protoc:3.4.0'
    }
    plugins {
        javalite {
            // The codegen for lite comes as a separate artifact
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
    }
//    generatedFilesBaseDir = "src/main/java/"
    generateProtoTasks {
        all().each { task ->
//            task.generateDescriptorSet = true
            task.builtins {
                // This yields
                // "--java_out=example_option1=true,example_option2:/path/to/output"
                // on the protoc commandline, which is equivalent to
                // "--java_out=/path/to/output --java_opt=example_option1=true,example_option2"
                // with the latest version of protoc.
                java {
                    option 'example_option1=true'
                    option 'example_option2'
//                    option '--java_out=example_option1=true,example_option2:/output'
                }
                // In most cases you don't need the full Java output
                // if you use the lite output.
                remove java
            }

            task.plugins {
                javalite {}
            }
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:design:28.0.0'
//    implementation 'com.google.protobuf:protobuf-java:3.4.0'
//    implementation 'com.google.protobuf:protoc:3.4.0'
    implementation 'com.google.protobuf:protobuf-lite:3.0.1'
    implementation 'com.contrarywind:Android-PickerView:4.1.6'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'
    implementation 'com.trello.rxlifecycle2:rxlifecycle:2.2.1'
    // If you want to bind to Android-specific lifecycles
    implementation 'com.trello.rxlifecycle2:rxlifecycle-android:2.2.1'
    // If you want pre-written Activities and Fragments you can subclass as providers
    implementation 'com.trello.rxlifecycle2:rxlifecycle-components:2.1.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.squareup.okhttp3:okhttp:3.12.3'
    implementation 'com.squareup.wire:wire-runtime:2.3.0-RC1'
    implementation 'yasic.library.BubbleView:bubbleview:0.0.4'
    implementation 'com.orhanobut:logger:2.2.0'

    implementation 'io.netty:netty-all:4.0.24.Final'

    implementation 'com.amap.api:location:3.3.0'
    implementation 'com.apkfuns.logutils:library:1.6.1'
    implementation 'com.amap.api:map2d:5.2.0'
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    implementation "com.squareup.retrofit2:adapter-rxjava:2.1.0"

    implementation 'com.squareup.retrofit2:retrofit:2.5.0'

    implementation "org.greenrobot:eventbus:3.1.1"

    implementation 'com.github.bumptech.glide:glide:4.9.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'
    implementation "com.github.bumptech.glide:annotations:4.9.0"
    implementation 'com.github.yyued:SVGAPlayer-Android:2.4.2'
//    implementation "com.github.bumptech.glide:okhttp3-integration:4.9.0"
// config repo on productFlavors
//    debugImplementation 'com.squareup.retrofit2:retrofit:2.4.0'
//    huaweiImplementation 'com.squareup.retrofit2:retrofit:2.4.0'
//    huaweiDomesticImplementation  'com.squareup.retrofit2:retrofit:2.4.0'
//    huaweiDomesticDebugImplementation  'com.squareup.retrofit2:retrofit:2.4.0'

}

afterEvaluate {
    assembleRelease.finalizedBy 'hello'
}
class GreetingPluginExtension {
    String message = "Hello from GreetingPlugin"
}


class GreetingPlugin implements Plugin<Project> {

    @Override
    void apply(Project project) {
        println "~~~~~~~~~GreetingPlugin~~~~~~~~~"
        def extension = project.extensions.create('greeting', GreetingPluginExtension)

        project.task('hello') {
            doLast {
                println extension.message
            }
        }

        project.android.applicationVariants.all{
            variant ->
                variant.outputs.all{
                    outputFileName = "${variant.name}-${variant.versionName}.apk"
                    println "outputFileName : " + outputFileName
                }
        }
    }
}

apply plugin: GreetingPlugin //应用插件，这样插件才能在gradle构建过程中生效。

greeting {
    message = "I am dynamic message"
}
